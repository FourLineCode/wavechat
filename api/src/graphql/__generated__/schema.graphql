"""Response object for authentication queries"""
type AuthResult {
  success: Boolean!
  user: User!
}

input ChangePasswordInput {
  newPassword: String!
  oldPassword: String!
}

input CreateMessageInput {
  attachments: [MediaDTOInput!]
  author: UserDTOInput!
  authorId: String!
  body: String!
  createdAt: String!
  id: String
  pk: Int
  threadId: String!
  updatedAt: String!
}

input CreateServerInput {
  iconUrl: String
  name: String!
  type: String!
}

scalar Date

"""FriendRequest object type"""
type FriendRequest {
  createdAt: Date!
  fromUser: User!
  fromUserId: ID!
  id: ID!
  pk: Int!
  toUser: User!
  toUserId: ID!
  updatedAt: Date!
}

"""Friendship object type"""
type Friendship {
  createdAt: Date!
  firstUser: User!
  firstUserId: ID!
  id: ID!
  pk: Int!
  secondUser: User!
  secondUserId: ID!
  updatedAt: Date!
}

"""Media object"""
type Media {
  createdAt: Date!
  encoding: String!
  filename: String!
  id: ID!
  message: Message!
  messageId: ID!
  mimetype: String!
  pk: Int!
  updatedAt: Date!
  url: String!
}

"""Response object for file upload"""
type MediaDTO {
  encoding: String!
  filename: String!
  mimetype: String!
  url: String!
}

input MediaDTOInput {
  encoding: String!
  filename: String!
  id: String
  mimetype: String!
  url: String!
}

"""Message object type"""
type Message {
  attachments: [Media!]!
  author: User!
  authorId: ID!
  body: String!
  createdAt: Date!
  id: ID!
  pk: Int!
  thread: MessageThread!
  threadId: ID!
  updatedAt: Date!
}

"""MessageThread object type"""
type MessageThread {
  createdAt: Date!
  id: ID!
  messages: [Message!]!
  participants: [User!]!
  pk: Int!
  updatedAt: Date!
}

type Mutation {
  """Accept a pending friend request"""
  acceptRequest(requestId: String!): Friendship!

  """Change users password"""
  changePassword(input: ChangePasswordInput!): SuccessResult!

  """Saves a message to the database"""
  createMessage(messageDTO: CreateMessageInput!): Message!

  """Returns an existing or newly created MessageThread"""
  createMessageThread(userId: String!): MessageThread!

  """Create a new server"""
  createServer(input: CreateServerInput!): Server!

  """Decline all pending friend requests"""
  declineAllRequests: Boolean!

  """Decline a pending friend request"""
  declineRequest(requestId: String!): FriendRequest!

  """Invite a user to a server"""
  inviteUserToServerById(serverId: String!, userId: String!): ServerInvite!

  """Removes all sessions other than current session"""
  removeOtherSessions: SuccessResult!

  """Send a friend request to a user"""
  sendRequest(userId: String!): FriendRequest!

  """Sign in user"""
  signin(input: SigninInput!): AuthResult!

  """Sign out user"""
  signout: SuccessResult!

  """Sign up new user"""
  signup(input: SignupInput!): AuthResult!

  """Unfriend a user"""
  unfriend(userId: String!): Friendship!

  """Unsend a sent friend request"""
  unsendRequest(requestId: String!): Boolean!

  """Update info for a user"""
  updateUser(input: UpdateUserInput!): User!

  """Upload multiple files"""
  uploadMultipleFiles(files: [Upload!]!): [MediaDTO!]!

  """Upload single file"""
  uploadSingleFile(file: Upload!): MediaDTO!
}

type Query {
  """Returns currently active MessageThreads for user"""
  activeMessageThreads: [MessageThread!]!

  """returns all users"""
  allUsers: [User!]!

  """Authorize user session"""
  authorize: AuthResult!

  """Gets random discoverable users for a client"""
  discoverUsers(cursor: Int, limit: Int! = 12, query: String!): [User!]!

  """Get friends list of current user"""
  friendsList: [Friendship!]!
  hello(name: String): String!

  """Get user list for a server that are invitable"""
  invitableUserList(serverId: String!): [User!]!

  """Check if user is a friend"""
  isFriend(userId: String!): Boolean!

  """Authorizes any rtc connection"""
  isSocketAuthorized(sessionId: String!): SocketAuthorizedResponse!

  """Authorize a user to join a rtc socket room"""
  isUserInThread(threadId: String!, userId: String!): Boolean!

  """Get all joined servers for current user"""
  joinedServers: [Server!]!

  """Returns a MessageThread by id"""
  messageThread(threadId: String!): MessageThread!

  """Get pending requests of current user"""
  pendingRequests: [FriendRequest!]!

  """Returns list of friends matching search term"""
  searchFriends(searchTerm: String!): [User!]!

  """Get sent requests of current user"""
  sentRequests: [FriendRequest!]!

  """Get a server by id"""
  server(serverId: String!): Server!

  """Returns all active sessions"""
  sessions: [Session!]!

  """Returns all messages owned by a thread"""
  threadMessages(threadId: String!): [Message!]!

  """returns info for a user"""
  user(userId: String!): User!

  """returns info for a user by username"""
  userByUsername(username: String!): User!
}

"""Server object type"""
type Server {
  adminUserIds: [String!]!
  bannedUserIds: [String!]!
  bannerUrl: String
  channels: [ServerChannel!]!
  createdAt: Date!
  iconUrl: String
  id: ID!
  members: [User!]!
  name: String!
  owner: User!
  ownerId: String!
  pendingInvites: [ServerInvite!]!
  pk: Int!
  type: String!
  updatedAt: Date!
}

"""ServerChannel object type"""
type ServerChannel {
  createdAt: Date!
  id: ID!
  locked: Boolean!
  name: String!
  pk: Int!
  server: Server!
  serverId: String!
  thread: MessageThread!
  threadId: String!
  updatedAt: Date!
}

"""ServerInvite object type"""
type ServerInvite {
  createdAt: Date!
  fromUser: User!
  fromUserId: String!
  id: ID!
  pk: Int!
  server: Server!
  serverId: String!
  toUser: User!
  toUserId: String!
  updatedAt: Date!
}

"""Information about user session"""
type Session {
  createdAt: Date!
  id: ID!
  pk: Int!
  updatedAt: Date!
  user: User!
  userAgent: String
  userId: ID!
}

input SigninInput {
  email: String!
  password: String!
}

input SignupInput {
  bio: String
  department: String
  email: String!
  password: String!
  semester: Int
  university: String
  username: String!
}

"""Response object for authorized socket connections"""
type SocketAuthorizedResponse {
  authorized: Boolean!
  user: User
}

"""Response object for succesful queries"""
type SuccessResult {
  success: Boolean!
}

input UpdateUserInput {
  avatarUrl: String
  bio: String
  department: String
  displayName: String
  semester: Int
  university: String
}

scalar Upload

"""User object type"""
type User {
  avatarUrl: String
  bio: String
  createdAt: Date!
  department: String
  displayName: String!
  email: String!
  friends: [Friendship!]!
  id: ID!
  messageThreads: [MessageThread!]!
  messages: [Message!]!
  pendingRequests: [FriendRequest!]!
  pk: Int!
  role: String!
  semester: Int
  sentRequests: [FriendRequest!]!
  sessions: [Session!]!
  university: String
  updatedAt: Date!
  username: String!
}

input UserDTOInput {
  avatarUrl: String
  displayName: String!
  id: String!
  username: String!
}