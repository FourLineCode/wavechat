type AuthResult {
  success: Boolean!
  user: User!
}

scalar Date

type FriendRequest {
  createdAt: Date!
  fromUser: User!
  fromUserId: ID!
  id: ID!
  pk: Int!
  toUser: User!
  toUserId: ID!
  updatedAt: Date!
}

type Friendship {
  createdAt: Date!
  firstUser: User!
  firstUserId: ID!
  id: ID!
  pk: Int!
  secondUser: User!
  secondUserId: ID!
  updatedAt: Date!
}

type Mutation {
  """Accept a pending friend request"""
  acceptRequest(requestId: String!): Friendship!

  """Decline all pending friend requests"""
  declineAllRequests: Boolean!

  """Decline a pending friend request"""
  declineRequest(requestId: String!): FriendRequest!

  """Send a friend request to a user"""
  sendRequest(userId: String!): FriendRequest!

  """Sign in user"""
  signin(input: SigninInput!): AuthResult!

  """Sign out user"""
  signout: SuccessResult!

  """Sign up new user"""
  signup(input: SignupInput!): AuthResult!

  """Unfriend a user"""
  unfriend(userId: String!): Friendship!

  """Unsend a sent friend request"""
  unsendRequest(requestId: String!): Boolean!
}

type Query {
  """returns all users"""
  allUsers: [User!]!

  """Authorize user session"""
  authorize: AuthResult!

  """Gets random discoverable users for a client"""
  discoverUsers(cursor: Int, limit: Int! = 12, query: String!): [User!]!

  """Get friends list of current user"""
  friendsList: [Friendship!]!
  hello(name: String): String!

  """Check if user is a friend"""
  isFriend(userId: String!): Boolean!

  """Get pending requests of current user"""
  pendingRequests: [FriendRequest!]!

  """Get sent requests of current user"""
  sentRequests: [FriendRequest!]!

  """returns info for a user"""
  user(userId: String!): User!
}

type Session {
  createdAt: Date!
  id: ID!
  pk: Int!
  updatedAt: Date!
  user: User!
  userId: ID!
}

input SigninInput {
  email: String!
  password: String!
}

input SignupInput {
  department: String
  email: String!
  password: String!
  semester: Int
  university: String
  username: String!
}

type SuccessResult {
  success: Boolean!
}

type User {
  avatarUrl: String
  createdAt: Date!
  department: String
  displayName: String!
  email: String!
  friends: [Friendship!]!
  id: ID!
  pendingRequests: [FriendRequest!]!
  pk: Int!
  role: String!
  semester: Int
  sentRequests: [FriendRequest!]!
  sessions: [Session!]!
  university: String
  updatedAt: Date!
  username: String!
}
