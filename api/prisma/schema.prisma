datasource db {
    provider = "postgresql"
    url      = env("DATABASE_URL")
}

generator client {
    provider = "prisma-client-js"
}

enum UserRole {
    USER
    ADMIN
}

model User {
    id        String   @id @default(uuid())
    pk        Int      @unique @default(autoincrement())
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    email       String   @unique
    username    String   @unique
    displayName String   @unique
    password    String
    role        UserRole @default(USER)
    bio         String?
    avatarUrl   String?

    university String?
    department String?
    semester   Int?

    sessions Session[] @relation("sessions")

    friendsForward  Friendship[]    @relation("friendsForward")
    friendsInverse  Friendship[]    @relation("friendsInverse")
    pendingRequests FriendRequest[] @relation("pendingRequests")
    sentRequests    FriendRequest[] @relation("sentRequests")

    messages            Message[]             @relation("userMessages")
    messageThreads      MessageThread[]       @relation("userThreads")
    MessageThreadOnUser MessageThreadOnUser[]

    ownedServers         Server[]       @relation("ownedServers")
    joinedServers        Server[]       @relation("joinedServers")
    ServerOnUser         ServerOnUser[]
    pendingServerInvites ServerInvite[] @relation("serverInvitesOnUser")
}

model Session {
    id        String   @id @default(uuid())
    pk        Int      @default(autoincrement())
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    user   User   @relation("sessions", fields: [userId], references: [id])
    userId String

    userAgent String?
}

model Friendship {
    id        String   @id @default(uuid())
    pk        Int      @default(autoincrement())
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    firstUser   User   @relation("friendsForward", fields: [firstUserId], references: [id])
    firstUserId String

    secondUser   User   @relation("friendsInverse", fields: [secondUserId], references: [id])
    secondUserId String

    @@unique([firstUserId, secondUserId])
}

model FriendRequest {
    id        String   @id @default(uuid())
    pk        Int      @default(autoincrement())
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    fromUser   User   @relation("sentRequests", fields: [fromUserId], references: [id])
    fromUserId String

    toUser   User   @relation("pendingRequests", fields: [toUserId], references: [id])
    toUserId String

    @@unique([fromUserId, toUserId])
}

model Media {
    id        String   @id @default(uuid())
    pk        Int      @default(autoincrement())
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    url      String
    filename String
    mimetype String
    encoding String

    message   Message @relation("messageMedia", fields: [messageId], references: [id])
    messageId String
}

model Message {
    id        String   @id @default(uuid())
    pk        Int      @default(autoincrement())
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    body        String  @default("")
    attachments Media[] @relation("messageMedia")

    author   User   @relation("userMessages", fields: [authorId], references: [id])
    authorId String

    thread   MessageThread @relation("threadMessages", fields: [threadId], references: [id])
    threadId String
}

model MessageThread {
    id        String   @id @default(uuid())
    pk        Int      @default(autoincrement())
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    participants        User[]                @relation("userThreads")
    MessageThreadOnUser MessageThreadOnUser[]

    messages Message[] @relation("threadMessages")

    server ServerChannel? @relation("threadOnServerChannel")
}

model MessageThreadOnUser {
    pk        Int      @default(autoincrement())
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    user   User   @relation(fields: [userId], references: [id])
    userId String

    messageThread   MessageThread @relation(fields: [messageThreadId], references: [id])
    messageThreadId String

    @@id([userId, messageThreadId])
}

enum ServerType {
    PUBLIC
    PRIVATE
    CLOSED
}

model Server {
    id        String   @id @default(uuid())
    pk        Int      @default(autoincrement())
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    name      String
    type      ServerType
    iconUrl   String?
    bannerUrl String?

    owner   User   @relation("ownedServers", fields: [ownerId], references: [id])
    ownerId String

    members      User[]         @relation("joinedServers")
    ServerOnUser ServerOnUser[]

    adminUserIds  String[]
    bannedUserIds String[]

    pendingInvites ServerInvite[] @relation("serverInvite")
}

model ServerOnUser {
    pk        Int      @default(autoincrement())
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    user   User   @relation(fields: [userId], references: [id])
    userId String

    server   Server @relation(fields: [serverId], references: [id])
    serverId String

    @@id([userId, serverId])
}

model ServerChannel {
    id        String   @id @default(uuid())
    pk        Int      @default(autoincrement())
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    name   String
    locked Boolean @default(false)

    thread   MessageThread @relation("threadOnServerChannel", fields: [threadId], references: [id])
    threadId String        @unique
}

model ServerInvite {
    id        String   @id @default(uuid())
    pk        Int      @default(autoincrement())
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    user   User   @relation("serverInvitesOnUser", fields: [userId], references: [id])
    userId String

    server   Server @relation("serverInvite", fields: [serverId], references: [id])
    serverId String

    @@unique([userId, serverId])
}
